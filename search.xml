<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日常问题</title>
      <link href="/2024/05/24/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
      <url>/2024/05/24/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="解决”x-packages-are-looking-for-funding”"><a href="#解决”x-packages-are-looking-for-funding”" class="headerlink" title="解决”x packages are looking for funding”"></a>解决”x packages are looking for funding”</h1><h3 id="解决npm-install安装出现packages-are-looking-for-funding-run-npm-fund-for-details问题"><a href="#解决npm-install安装出现packages-are-looking-for-funding-run-npm-fund-for-details问题" class="headerlink" title="解决npm install安装出现packages are looking for funding run npm fund for details问题"></a>解决npm install安装出现packages are looking for funding run <code>npm fund</code> for details问题</h3><p>当我们运行<strong>npm</strong> <strong>install</strong>时，可能会收到类似以下的提示信息：<strong>“x packages are looking for funding.”</strong> 这并不是错误提示，也不会影响项目的正常运行。相反，这是提醒您，有一些软件包正在寻求资金支持。</p><p>这个提示的目的是让开发者们意识到，许多开源项目的开发是由志愿者进行的，他们投入了大量时间和精力。您可以选择通过为这些项目提供捐款来支持他们。—-(<strong>本人使用的这个</strong>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set fund <span class="literal">false</span> --location=<span class="variable language_">global</span></span><br></pre></td></tr></table></figure><p>如果您只想在特定项目中关闭此提示，请在项目目录中运行以下命令：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set fund <span class="literal">false</span> </span><br></pre></td></tr></table></figure><p>这样，您就不会再收到有关捐款支持的提示了，但是请记住，支持开源项目的开发者们是非常重要的。</p><p><br/></p><p>配置Nginx反向代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /api/ &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:8080/api/;</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> $http_origin;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    add_header Access-Control-Allow-Methods <span class="string">&#x27;GET,POST,OPTIONS&#x27;</span>;</span><br><span class="line">    add_header Access-Control-Allow-Headers <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> ($request_method = <span class="string">&#x27;OPTIONS&#x27;</span>)&#123;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> $http_origin;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,POST,OPTIONS&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">        add_header <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">204</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>在Linux系统中查文件命令；</p><p>在Unⅸ系统当前的test目录中查找所有以test开头的文件？</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="built_in">test</span> -<span class="built_in">type</span> f -name <span class="string">&#x27;test*&#x27;</span></span><br></pre></td></tr></table></figure><p>如果当前目录在test的父目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="built_in">test</span>/test*</span><br></pre></td></tr></table></figure><p><br/></p><hr><p>ArrayList和LinkedList的区别：<br>ArrayList基于动态数组实现，访问速度快，LinkedList基于链表，内存大，批量增删效果好</p><p>==和equals的区别：<br>==比较内存地址，equals比较内存地址的值。</p><p><br/></p><hr><h4 id="注册逻辑"><a href="#注册逻辑" class="headerlink" title="注册逻辑"></a>注册逻辑</h4><ol><li>前端传入两个参数（账户密码以及校验密码）</li><li>检查是否为空，不为空检查是否符合长度规范，以及不能包含特殊字符,账户是否重复</li><li>密码加密Md5加密，插入数据，返回用户ID</li></ol><h4 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h4><p>访问服务端—&gt;登陆成功—&gt;于是在服务器创建==SessionID==（没有规律的字符串）和会话结束时间—&gt;服务器把SessionID 和会话结束时间发送给浏览器-就用到了Cookie—&gt;设置Cookie，并且把SessionID和会话时间存到Cookie里—并且再把会话时间设置为这个Cookie的有效期——（浏览器没有保存账户和密码，保存的是无规律的字符串）</p><p><br/></p><h4 id="解决缓存不一致性问题："><a href="#解决缓存不一致性问题：" class="headerlink" title="解决缓存不一致性问题："></a>解决缓存不一致性问题：</h4><p>主要解决方案是==旁路缓存模式==，也就是在更新数据库和删除缓存时，建议呢先更新数据库再删除缓存，避免缓存不一致性问题删除缓存就是减少不一致的概率吧，为什么是删除缓存呢，认为就是一种给懒加载思想，如果数据库在1小时内更新1000次，也要更新1000次缓存的，但1000次中我只请求了一次缓存，那就是没有必要的，反过来说删除缓存只删1次就可以了</p><p><br/></p><h4 id="String-StringBuider-StringBuffer"><a href="#String-StringBuider-StringBuffer" class="headerlink" title="String,StringBuider,StringBuffer"></a>String,StringBuider,StringBuffer</h4><div class="table-container"><table><thead><tr><th>类型</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>String</td><td>不可变，线程安全</td><td>操作少量或==不需要==操作字符串</td></tr><tr><td>StringBuider</td><td>可变，线程不安全</td><td>需要==频繁操作==且不用考虑线程安全</td></tr><tr><td>StringBuffer</td><td>（使用synchronized关键字）可变，安全，性能低</td><td>需频繁操作且考虑线程安全</td></tr></tbody></table></div><p><br/></p><h4 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h4><p>1.继承Tread类，实现类，调用start(),重写run方法—缺点:类只能单继承，不能有其他父类</p><p>2.实现Runnable接口，接口可以多继承，好处就是没有继承限制，缺点：无法在线程中返回值</p><p>3.如果在线程中返回结果的话，实现Callable接口，需要结合FutureTask使用，将类传进来，再实现Tread传入futureTask，call方法可以返回值</p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>HashMap内部数组加链表，当数组&gt;=64,链表&gt;=8，就会把链表装换成红黑树提升数据查找性能</p><p><br/></p><h4 id="SpringMVC常用的注解有哪些？"><a href="#SpringMVC常用的注解有哪些？" class="headerlink" title="SpringMVC常用的注解有哪些？"></a>SpringMVC常用的注解有哪些？</h4><p>@RequestMapping:用于处理请求URL映射的注解，用在类上表示所有的响应请求的方法都是以该路径作为父路径</p><p>@RequestBody：注解实现接受Http请求的json数据，将json转换为java对象</p><p>@ResponseBody：将controller对象返回对象转化为json对象响应给客户</p><p>@CrossOrigin：实现跨域请求</p><h4 id="谈谈你对AOP的理解"><a href="#谈谈你对AOP的理解" class="headerlink" title="谈谈你对AOP的理解"></a>谈谈你对AOP的理解</h4><p>与业务逻辑无关，却为业务模块共同调用的逻辑封装起来，像（事务处理，日式管理，权限控制）减少系统重复代码，降低耦合</p><h4 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h4><p>Docker是容器，可以将项目的环境和项目的代码一起打包成镜像，所有人可下载镜像，便于分发移植，</p><p>在启动项目时，不需要瞧一堆命令，而是直接下载镜像，启动镜像就可以了，可以理解成软件安装包</p><ol><li>用的宝塔，在宝塔 软件商店 下载Docker管理器，界面<strong>创建容器</strong></li><li><strong>后端</strong> 写DockerFile ，用于构建 Docker 镜像 的方法</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引用基础镜像</span></span><br><span class="line"><span class="comment">#打包了maven3.5和JDK8依赖</span></span><br><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.5</span>-jdk-<span class="number">8</span>-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy local code to the container image.</span></span><br><span class="line"><span class="comment"># 指定 镜像的工作目录-指定了app目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="comment"># 复制本地pom文件和源码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src ./src</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Build a release artifact.</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn package -DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the web service on container startup.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/target/yupao-backend-0.0.1-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 切换到 root目录</span></span><br><span class="line">cd /www/wwwroot/</span><br><span class="line"><span class="comment">//2.检查git-安装宝塔自动装git-加上sudo命令 因为服务器提供的用户为普通用户</span></span><br><span class="line">sudo git clone <span class="string">&#x27;项目地址&#x27;</span></span><br><span class="line"><span class="comment">// 进入目录-列出当前目录中的文件和子目录</span></span><br><span class="line">ls </span><br></pre></td></tr></table></figure><p>根据 Dockerfile 构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t user-center-backend:v0.0.1 .</span><br></pre></td></tr></table></figure><ol><li>前端 Dockerfile 和 Nginx配置文件</li></ol><p><strong>nginx.conf</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip config</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">9</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Dockerfile:</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搞一个有Nginx的基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="comment"># 把本地Nginx配置 复制到基础镜像配置目录，覆盖掉</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker/nginx.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./dist  /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续Clone代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone <span class="string">&#x27;前端项目地址&#x27;</span></span><br><span class="line"><span class="comment">// 查看当前目录文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment">// 切换到user-center-fronted/目录</span></span><br><span class="line">cd user-center-fronted/</span><br><span class="line"><span class="comment">// 再查看目录</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>根据 Dockerfile 构建镜像:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t user-center-fronted:v0.0.1 .</span><br></pre></td></tr></table></figure><p><br/></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前机器已经拉取得镜</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p>从名为user-center-frontend并带有v0.0.1标签的Docker镜像中启动一个新的容器实例，将宿主机的80 /(8080) 端口映射到容器的80/(8080) 端口，并在后台运行这个容器。</p><ul><li>-t —-&gt;构建的镜像命名</li><li>-p —-&gt;用于指定端口映射</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端</span></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -p 80:80 -d user-center-frontend:v0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -p 8080:8080 user-center-backend:v0.0.1</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看进程（可以查看已经启动的容器ID,没有权限用sudo)</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 查看日志 docker logs 容器ID</span></span><br><span class="line">docker logs 容器ID</span><br></pre></td></tr></table></figure><p><br/></p><h4 id="通用返回对象和自定义错误码"><a href="#通用返回对象和自定义错误码" class="headerlink" title="通用返回对象和自定义错误码"></a>通用返回对象和自定义错误码</h4><p><strong>通用返回对象目的：</strong>简化错误处理，因为接口返回的对象类型不一，Long，User类型等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseResponse</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code, T data, String message, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code, T data, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code,data,message,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(<span class="type">int</span> code,T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(code,data,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseResponse</span><span class="params">(ErrorCode errorCode)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(errorCode.getCode(),<span class="literal">null</span>,errorCode.getMessage(),errorCode.getDescripton());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把所有的请求都用通用返回对象封装一下</p><p><strong>自定义错误码：</strong>前端错误码少且不精确，要提供清晰的错误提示，也防止暴露敏感信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">0</span>,<span class="string">&quot;OK&quot;</span>,<span class="string">&quot;&quot;</span>),</span><br><span class="line">    PARAMS_ERROR(<span class="number">40000</span>,<span class="string">&quot;请求参数错误&quot;</span>,<span class="string">&quot;&quot;</span>),</span><br><span class="line">    NULL_ERROR(<span class="number">40001</span>,<span class="string">&quot;请求数据为空&quot;</span>,<span class="string">&quot;&quot;</span>),</span><br><span class="line">    NOT_LOGIN(<span class="number">40100</span>,<span class="string">&quot;未登录&quot;</span>,<span class="string">&quot;&quot;</span>),</span><br><span class="line">    NO_AUTH(<span class="number">40101</span>,<span class="string">&quot;暂无权限&quot;</span>,<span class="string">&quot;&quot;</span>),</span><br><span class="line">    FORBIDDEN(<span class="number">40301</span>,<span class="string">&quot;禁止操作&quot;</span>,<span class="string">&quot;&quot;</span>),</span><br><span class="line">    INVALID_PASSWORD_ERROR(<span class="number">40102</span>, <span class="string">&quot;无效密码&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">    OPERATION_ERROR(<span class="number">50001</span>, <span class="string">&quot;操作失败&quot;</span>, <span class="string">&quot;操作失败&quot;</span>),</span><br><span class="line">    SYSTEM_ERROR(<span class="number">50000</span>,<span class="string">&quot;系统内部异常&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="comment">//状态码信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">    <span class="comment">//状态码描述(详情)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String descripton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ErrorCode(<span class="type">int</span> code, String message, String descripton) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.descripton = descripton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescripton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> descripton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局异常处理器：不把服务器内部错误返回给前端</p><h4 id="封装全局异常处理"><a href="#封装全局异常处理" class="headerlink" title="封装全局异常处理"></a>封装全局异常处理</h4><p><strong>1.定义业务异常类</strong></p><ol><li>相对于java的异常类，支持更多字段</li><li>自定义构造函数，更灵活/快捷的设置字段<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(<span class="type">int</span> code, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.description = errorCode.getDescripton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>2.编写全局异常处理器</strong><br>作用：</p><ol><li>捕获代码中所有的异常，内部消化，集中处理，让前端得到更详细的业务报错/信息</li><li><p>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</p><p><strong>@RestControllerAdvice</strong> 是 Spring MVC 中的一个注解，用于实现面向切面编程（AOP）中的通知（advice）。它不是一个直接的AOP实现机制，但它确实利用了AOP的思想，即在不修改业务代码的情况下，对Controller层的行为进行增强或全局性的错误处理。</p><p><strong>@RestControllerAdvice</strong> 通常用于定义跨切面的控制器异常处理、参数校验、日志记录等通用逻辑，这些逻辑会被应用到所有使用了 @RestController 或 @RequestMapping 的方法上。它的具体实现是通过Spring AOP的@Around或@AfterReturning等通知类型来完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse <span class="title function_">businessExceptionHandler</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;businessException:&quot;</span> + e.getMessage(),e);</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.error(e.getCode(), e.getMessage(), e.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse <span class="title function_">runtimeExceptionHandler</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;runtimeException&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.error(ErrorCode.SYSTEM_ERROR,e.getMessage(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><br/></p><p>索引原理：就是把无序的数据变成有序的查询</p><h4 id="MySQL的B树和B-树"><a href="#MySQL的B树和B-树" class="headerlink" title="MySQL的B树和B+树"></a>MySQL的B树和B+树</h4><p>B树查询效率不太稳定，有些在 根节点或者在根节点附近能找到 ，搜索起来就很快，如果在叶子节点上，就查询慢，有的快，有的慢，性能不稳定</p><p>B+树把数据全部放在了叶子节点上，这样不管查询哪个数据，最终都要走到叶子节点，解决了查询性能不稳定问题，上面的节点不存储数据，腾出来的空间用来存储指向其他节点的指针，中间的节点分叉更多，整个树变得更加扁平，进一步减少IO次数，最后把叶子节点用指针连接起来，解决范围查询问题</p><p><br/></p><h4 id="编辑距离算法"><a href="#编辑距离算法" class="headerlink" title="编辑距离算法"></a>编辑距离算法</h4><p>引入原有算法进行改造(将字符比较-变成tagList标签字符串)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(List&lt;String&gt; tagList1, List&lt;String&gt; tagList2)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tagList1.size();</span><br><span class="line">       <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> tagList2.size();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (n * m == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> n + m;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">           d[i][<span class="number">0</span>] = i;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">           d[<span class="number">0</span>][j] = j;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> d[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">               <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> d[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">               <span class="type">int</span> <span class="variable">left_down</span> <span class="operator">=</span> d[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">               <span class="keyword">if</span> (!Objects.equals(tagList1.get(i - <span class="number">1</span>), tagList2.get(j - <span class="number">1</span>))) &#123;</span><br><span class="line">                   left_down += <span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               d[i][j] = Math.min(left, Math.min(down, left_down));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> d[n][m];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>是计算用户列表中<strong>每个用户</strong>与<strong>登录用户</strong>的标签列表之间的<strong>相似度</strong>或距离，并将这些相似度或距离按照用户索引的顺序存储在一个有序映射中。</p><p>然后查询用户列表-并取当前用户标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = <span class="built_in">this</span>.list();</span><br><span class="line"><span class="type">String</span> <span class="variable">tags</span> <span class="operator">=</span> loginUser.getTags();</span><br></pre></td></tr></table></figure><p>使用Google的Gson库来将JSON格式的字符串（在这里是tags）反序列化为Java中的List<String>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">List&lt;String&gt; tagList = gson.fromJson(tags, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">&#125;.getType());</span><br><span class="line">System.out.println(tagList);</span><br></pre></td></tr></table></figure><p>初始化有序映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortedMap&lt;Integer, Long&gt; indexDistanceMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>遍历用户列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;userList.size(); i++) &#123;</span><br><span class="line">  <span class="comment">// 首先，从userList中获取索引为i的用户对象，并调用其getTags()方法获取该用户的标签字符串。</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userList.get(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userTags</span> <span class="operator">=</span> user.getTags();</span><br><span class="line">            <span class="comment">//无标签的</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(userTags))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;String&gt; userTagList = gson.fromJson(userTags, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br><span class="line">            <span class="comment">//计算相似度（或距离）</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">distance</span> <span class="operator">=</span> AlgorithmUtils.minDistance(tagList, userTagList);</span><br><span class="line">            <span class="comment">//将相似度（或距离）存储在映射中：</span></span><br><span class="line">            indexDistanceMap.put(i,distance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TreeMap是有序的，所以这些键值对将按照键（即用户索引）的升序排序。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智享用户服务中心项目</title>
      <link href="/2024/05/22/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/05/22/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="智享用户服务中心项目"><a href="#智享用户服务中心项目" class="headerlink" title="智享用户服务中心项目"></a>智享用户服务中心项目</h2><h2 id="请点击访问👇👇👇👇"><a href="#请点击访问👇👇👇👇" class="headerlink" title="请点击访问👇👇👇👇"></a>请点击访问👇👇👇👇</h2><h3 id="智享用户服务中心🌸🌸"><a href="#智享用户服务中心🌸🌸" class="headerlink" title="智享用户服务中心🌸🌸"></a><a href="http://117.72.69.69/user/login">智享用户服务中心</a>🌸🌸</h3><div class="table-container"><table><thead><tr><th style="text-align:center">账号</th><th style="text-align:center">密码</th></tr></thead><tbody><tr><td style="text-align:center">test</td><td style="text-align:center">abcd1234</td></tr></tbody></table></div><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h5 id="项目介绍："><a href="#项目介绍：" class="headerlink" title="项目介绍："></a>项目介绍：</h5><p>企业核心的智享用户服务中心系统，基于Spring Boot后端+React前端的全栈项目，实现了用户注册登录、查询等基础功能。</p><h5 id="技术选型："><a href="#技术选型：" class="headerlink" title="技术选型："></a>技术选型：</h5><h5 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h5><ol><li>主要运用阿里Ant Design生态</li><li>HTML+CSS+JavaScript三件套</li><li>React开发框架</li><li>Ant Design Pro项目模板</li><li>Ant Design端组件库</li><li>Umi开发框架</li><li>Umi Request请求库</li><li>正向和反向代理</li></ol><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ol><li>Java编程语言</li><li>Spring+SpringMVC+SpringBoot框架</li><li>MyBatis+MyBatis Plus数据访问框架</li><li>MySQL数据库</li><li>jUnit单元测试库</li></ol><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ol><li>Linux单机部署</li><li>Nginx Web服务器</li><li>Docker容器</li><li>容器托管平台</li></ol><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E7%99%BB%E5%BD%95.png" alt="登录"></p><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E6%B3%A8%E5%86%8C.png" alt="注册"></p><h4 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a>欢迎页面</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E6%AC%A2%E8%BF%8E%E9%A1%B5%E9%9D%A2.png" alt="欢迎页面"></p><h4 id="介绍技术栈"><a href="#介绍技术栈" class="headerlink" title="介绍技术栈"></a>介绍技术栈</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E4%BB%8B%E7%BB%8D%E6%8A%80%E6%9C%AF%E6%A0%88.png" alt="介绍技术栈"></p><h4 id="管理-用户管理页"><a href="#管理-用户管理页" class="headerlink" title="管理-用户管理页"></a>管理-用户管理页</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E7%AE%A1%E7%90%86-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E9%A1%B5.png" alt="管理-用户管理页"><br><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7.png" alt="管理-用户管理页"><br><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E6%98%AF%E5%90%A6%E5%88%A0%E9%99%A4.png" alt="是否删除"></p><h4 id="管理员添加新用户"><a href="#管理员添加新用户" class="headerlink" title="管理员添加新用户"></a>管理员添加新用户</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E7%AE%A1%E7%90%86%E5%91%98%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%94%A8%E6%88%B7.png" alt="管理员添加新用户"></p><h4 id="个人信息展示"><a href="#个人信息展示" class="headerlink" title="个人信息展示"></a>个人信息展示</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E5%B1%95%E7%A4%BA.png" alt="个人信息展示"><br><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81.png" alt="修改密码"></p><h4 id="词云图"><a href="#词云图" class="headerlink" title="词云图"></a>词云图</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E4%BA%91%E5%9B%BE.png" alt="词云图"><br><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E4%BA%91%E7%94%9F%E5%9B%BE2.png" alt="词云图"></p><h4 id="个人信息展示-1"><a href="#个人信息展示-1" class="headerlink" title="个人信息展示"></a>个人信息展示</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E5%88%86%E7%B1%BB%E5%B1%95%E7%A4%BA1.png" alt="个人信息展示"><br><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/%E5%88%86%E7%B1%BB%E5%B1%95%E7%A4%BA2.png" alt="个人信息展示"></p><h4 id="Ant-design-pro主题风格"><a href="#Ant-design-pro主题风格" class="headerlink" title="Ant design pro主题风格"></a>Ant design pro主题风格</h4><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E6%99%BA%E4%BA%AB%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%BF%83/ant%20design%20pro%E4%B8%BB%E9%A2%98%E9%A3%8E%E6%A0%BC.png" alt=" Ant design pro主题风格"></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学伴易寻系统</title>
      <link href="/2024/05/21/%E5%AD%A6%E4%BC%B4%E6%98%93%E5%AF%BB%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/05/21/%E5%AD%A6%E4%BC%B4%E6%98%93%E5%AF%BB%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="学伴易寻系统"><a href="#学伴易寻系统" class="headerlink" title="学伴易寻系统"></a>学伴易寻系统</h2><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h4 id="🥇项目介绍："><a href="#🥇项目介绍：" class="headerlink" title="🥇项目介绍："></a>🥇项目介绍：</h4><p>目的：帮助大家找到学习伙伴的<strong>移动端H5网站</strong>(APP风格)，</p><p>这是一个基于<strong>Spring Boot后端+Vue3</strong>前端的全栈项目，包括用<br>户登录、更新个人信息、按标签搜索用户、建房组队、推荐相似用户等功能。</p><h4 id="未来展望："><a href="#未来展望：" class="headerlink" title="未来展望："></a>未来展望：</h4><p>接下来，我会努力让“学伴易寻系统”变得更好用，增加一些新的功能，让大家找学伴、学知识变得更简单、更有趣。我相信，只要大家喜欢并支持，这个系统就能陪伴大家在学习路上走得更远，成为大家学习的好帮手！🤗</p><h4 id="技术选型："><a href="#技术选型：" class="headerlink" title="技术选型："></a><strong>技术选型：</strong></h4><h5 id="前端："><a href="#前端：" class="headerlink" title="前端："></a><strong>前端：</strong></h5><ol><li>Vue 3</li><li>Vant UI组件库</li><li>Vite脚手架</li><li>Axios请求库</li></ol><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><ol><li>Java SpringBoot框架</li><li>MySQL数据库</li><li>MyBatis-Plus</li><li>MyBatis X自动生成代码</li><li>Redis缓存（多种Java实现方式）</li><li>Redis分布式登录</li><li>Redisson分布式锁</li><li>Easy Excel数据导入</li><li>Spring Scheduler 定时任务</li><li>Swagger+Knife4j接口文档</li><li>Gson:JS0N序列化库</li><li>相似度匹配算法</li></ol><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><ul><li>Serverless服务</li><li>云原生容器平台</li></ul><p><br/></p><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><h4 id="用户完成登录流程后，系统将引导至主界面，用户可选择进入心动模式以启动-用户匹配-服务。"><a href="#用户完成登录流程后，系统将引导至主界面，用户可选择进入心动模式以启动-用户匹配-服务。" class="headerlink" title="用户完成登录流程后，系统将引导至主界面，用户可选择进入心动模式以启动==用户匹配==服务。"></a>用户完成登录流程后，系统将引导至主界面，用户可选择进入心动模式以启动==用户匹配==服务。</h4><p><br/></p><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%AD%A6%E4%BC%B4%E6%98%93%E5%AF%BB%E5%9B%BE%E7%89%87%E9%9B%86/%E7%99%BB%E5%BD%95%EF%BC%8C%E4%B8%BB%E9%A1%B5%EF%BC%8C%E5%BF%83%E5%8A%A8.jpg" alt="登录，主页，心动"></p><p><br/></p><h3 id="队伍页"><a href="#队伍页" class="headerlink" title="队伍页"></a>队伍页</h3><h4 id="队伍界面管理：点击加号创建新队伍，支持-公开-与-加密-两种模式。"><a href="#队伍界面管理：点击加号创建新队伍，支持-公开-与-加密-两种模式。" class="headerlink" title="队伍界面管理：点击加号创建新队伍，支持==公开==与==加密==两种模式。"></a>队伍界面管理：点击加号创建新队伍，支持==公开==与==加密==两种模式。</h4><p><br/></p><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%AD%A6%E4%BC%B4%E6%98%93%E5%AF%BB%E5%9B%BE%E7%89%87%E9%9B%86/%E5%85%AC%E5%BC%80%EF%BC%8C%E5%8A%A0%E5%AF%86%EF%BC%8C%E5%88%9B%E5%BB%BA%E9%98%9F%E4%BC%8D.jpg" alt="公开，加密，创建队伍"></p><p><br/></p><h4 id="为了保护队伍隐私，加密队伍需要密码才能进入。同时，我们也提供-标签搜索-功能，帮助你快速找到志同道合的伙伴。"><a href="#为了保护队伍隐私，加密队伍需要密码才能进入。同时，我们也提供-标签搜索-功能，帮助你快速找到志同道合的伙伴。" class="headerlink" title="为了保护队伍隐私，加密队伍需要密码才能进入。同时，我们也提供==标签搜索==功能，帮助你快速找到志同道合的伙伴。"></a>为了保护队伍隐私，加密队伍需要密码才能进入。同时，我们也提供==标签搜索==功能，帮助你快速找到志同道合的伙伴。</h4><p><br/></p><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%AD%A6%E4%BC%B4%E6%98%93%E5%AF%BB%E5%9B%BE%E7%89%87%E9%9B%86/%E5%8A%A0%E5%AF%86%EF%BC%8C%E6%A0%87%E7%AD%BE%EF%BC%8C%E7%BB%93%E6%9E%9C.jpg" alt="加密，标签，结果"></p><p><br/></p><h3 id="个人页"><a href="#个人页" class="headerlink" title="个人页"></a>个人页</h3><h4 id="用户可以在个人信息界面方便地修改个人信息，并对自己创建和加入的队伍进行管理。"><a href="#用户可以在个人信息界面方便地修改个人信息，并对自己创建和加入的队伍进行管理。" class="headerlink" title="用户可以在个人信息界面方便地修改个人信息，并对自己创建和加入的队伍进行管理。"></a>用户可以在个人信息界面方便地修改个人信息，并对自己创建和加入的队伍进行管理。</h4><p><br/></p><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%AD%A6%E4%BC%B4%E6%98%93%E5%AF%BB%E5%9B%BE%E7%89%87%E9%9B%86/%E4%B8%AA%E4%BA%BA%EF%BC%8C%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%B7%B2%E5%88%9B%E5%BB%BA.jpg" alt="个人，修改，已创建"></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring容器：IoC</title>
      <link href="/2024/05/21/%E5%85%B3%E4%BA%8ESpring%E7%9A%84IOC/"/>
      <url>/2024/05/21/%E5%85%B3%E4%BA%8ESpring%E7%9A%84IOC/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Spring容器：IoC"><a href="#1、Spring容器：IoC" class="headerlink" title="1、Spring容器：IoC"></a>1、Spring容器：IoC</h2><ol><li>IoC 是 Inversion of Control 的简写，译为“控制反转”，它不是一门技术，而是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。</li><li>Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。</li><li>IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring 从诞生到成长的整个过程。</li></ol><h3 id="1-2、IoC容器"><a href="#1-2、IoC容器" class="headerlink" title="1.2、IoC容器"></a>1.2、IoC容器</h3><h4 id="1-2-1、控制反转（IoC）"><a href="#1-2-1、控制反转（IoC）" class="headerlink" title="1.2.1、控制反转（IoC）"></a>1.2.1、控制反转（IoC）</h4><ul><li>控制反转是一种思想。</li><li>控制反转是为了降低程序耦合度，提高程序扩展力。</li><li>控制反转，反转的是什么？</li><li><ul><li>将对象的创建权利交出去，交给第三方容器负责。</li><li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li></ul></li><li>控制反转这种思想如何实现呢？</li><li><ul><li>DI（Dependency Injection）：依赖注入</li></ul></li></ul><h4 id="1-2-2、依赖注入"><a href="#1-2-2、依赖注入" class="headerlink" title="1.2.2、依赖注入"></a>1.2.2、依赖注入</h4><p>DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想。</p><p>依赖注入：</p><ul><li>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</li></ul><p>依赖注入常见的实现方式包括两种：</p><ul><li>第一种：set注入</li><li>第二种：构造注入</li></ul><p>所以结论是：IOC 就是一种控制反转的思想， 而 DI 是对IoC的一种具体实现。</p><p>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。</p><h4 id="1-2-3、IoC容器在Spring的实现"><a href="#1-2-3、IoC容器在Spring的实现" class="headerlink" title="1.2.3、IoC容器在Spring的实现"></a>1.2.3、IoC容器在Spring的实现</h4><p>Spring 的 IoC 容器就是 IoC思想的一个落地的产品实现。IoC容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建IoC 容器。Spring 提供了IoC 容器的两种实现方式：</p><p>①BeanFactory</p><p>这是 IoC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><p>②ApplicationContext</p><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p><p>③ApplicationContext的主要实现类</p><p><img src="https://xinhuo-store.oss-cn-hangzhou.aliyuncs.com/%E5%B0%8F%E5%9B%BE%E7%89%87/img005.png" alt="主要实现类"></p><div class="table-container"><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客语言</title>
      <link href="/2024/05/21/2024-5-20-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/05/21/2024-5-20-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="简单介绍MarkDown语法-和Butterfly外挂标签"><a href="#简单介绍MarkDown语法-和Butterfly外挂标签" class="headerlink" title="简单介绍MarkDown语法 和Butterfly外挂标签"></a>简单介绍MarkDown语法 和Butterfly外挂标签</h1><h2 id="1-行内图片-inlineimage"><a href="#1-行内图片-inlineimage" class="headerlink" title="1.行内图片 inlineimage"></a>1.行内图片 inlineimage</h2><p>这是 <img no-lazy class="inline" src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%90%90%E8%88%8C.png" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%90%90%E8%88%8C.png" style="height:40px;"/> 一段话。</p><h2 id="诗词标签-poem"><a href="#诗词标签-poem" class="headerlink" title="诗词标签 poem"></a>诗词标签 poem</h2><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><h2 id="2-引入note"><a href="#2-引入note" class="headerlink" title="2.引入note"></a>2.引入note</h2><h2 id="自带icon"><a href="#自带icon" class="headerlink" title="自带icon"></a>自带icon</h2><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>              </div>            </details><h2 id="外部icon"><a href="#外部icon" class="headerlink" title="外部icon"></a>外部icon</h2><div class="note [color] [icon] [style] flat"><p>Any content (support inline tags too.io).</p></div><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><h2 id="行内文本span"><a href="#行内文本span" class="headerlink" title="行内文本span"></a>行内文本span</h2><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新闻资讯的在线服务平台</title>
      <link href="/2024/05/21/%E7%9D%81%E7%9C%BC%E7%9C%8B%E4%B8%96%E7%95%8C/"/>
      <url>/2024/05/21/%E7%9D%81%E7%9C%BC%E7%9C%8B%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="微讯快报"><a href="#微讯快报" class="headerlink" title="微讯快报"></a>微讯快报</h1><h3 id="微讯快报-业务简介"><a href="#微讯快报-业务简介" class="headerlink" title="微讯快报 业务简介"></a>微讯快报 业务简介</h3><ul><li>用户功能<ul><li>注册功能</li><li>登录功能</li><li>jwt实现</li></ul></li><li>头条新闻<ul><li>新闻的分页浏览</li><li>通过标题关键字搜索新闻</li><li>查看新闻详情</li><li>新闻的修改和删除</li></ul></li></ul><h3 id="技术栈介绍"><a href="#技术栈介绍" class="headerlink" title="技术栈介绍"></a>技术栈介绍</h3><blockquote><p>前端技术栈</p></blockquote><ul><li>ES6作为基础JS语法</li><li>nodejs用于运行环境</li><li>npm用于项目依赖管理工具</li><li>vite用于项目的构建架工具</li><li>Vue3用于项目数据的渲染框架</li><li>Axios用于前后端数据的交互</li><li>Router用于页面的跳转</li><li>Pinia用于存储用户的数据</li><li>LocalStorage作为用户校验token的存储手段</li><li>Element-Plus提供组件</li></ul><blockquote><p>后端技术栈</p></blockquote><ul><li>JAVA作为开发语言,版本为JDK17</li><li>Tomcat作为服务容器,版本为10.1.7</li><li>Mysql8用于项目存储数据</li><li>SpringMVC用于控制层实现前后端数据交互</li><li>MyBatis-Plus用于实现数据的CURD</li><li>Druid用于提供数据源的连接池</li><li>SpringBoot作为项目基础架构</li><li>MD5用于用户密码的加密</li><li>Jwt用于token的生成和校验</li><li>Jackson用于转换JSON</li></ul><h3 id="快报未登录首页"><a href="#快报未登录首页" class="headerlink" title="快报未登录首页"></a>快报未登录首页</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E5%BF%AB%E6%8A%A5%E6%9C%AA%E7%99%BB%E5%BD%95%E9%A6%96%E9%A1%B5.png" alt="快报未登录首页"></p><h3 id="快报登录首页"><a href="#快报登录首页" class="headerlink" title="快报登录首页"></a>快报登录首页</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E7%99%BB%E5%BD%95%E5%90%8E%E9%A6%96%E9%A1%B5.png" alt="快报登录首页"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E7%99%BB%E5%BD%95.png" alt="登录"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E6%B3%A8%E5%86%8C.png" alt="注册"></p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2.png" alt="模糊查询"></p><h3 id="查看全文"><a href="#查看全文" class="headerlink" title="查看全文"></a>查看全文</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E6%9F%A5%E7%9C%8B%E5%85%A8%E6%96%87.png" alt="查看全文"></p><h3 id="发布快报"><a href="#发布快报" class="headerlink" title="发布快报"></a>发布快报</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E5%8F%91%E5%B8%83%E5%BF%AB%E6%8A%A5.png" alt="发布快报"></p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E5%88%86%E9%A1%B5.png" alt="分页"></p><h3 id="修改当前快报"><a href="#修改当前快报" class="headerlink" title="修改当前快报"></a>修改当前快报</h3><p><img src="https://wbe-tilas.oss-cn-hangzhou.aliyuncs.com/%E5%BE%AE%E8%AE%AF%E5%BF%AB%E6%8A%A5/%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E5%BF%AB%E6%8A%A5.png" alt="修改当前快报"></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
